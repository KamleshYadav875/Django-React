{"version":3,"sources":["InfoBox.js","StockInfo.js","Graph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","date","todayStock","prevStock","market","c","Card","className","CardContent","Typography","color","gutterBottom","StockInfo","diff","per","open","type","low","high","parseFloat","toFixed","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","scales","xAxes","time","format","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","Graph","company","useState","setData","useEffect","a","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","ticker","setTicker","stock","setStock","Stockdata","onStockChange","e","tickerSymbol","target","url","companyName","setCompanyName","FormControl","Select","variant","onChange","MenuItem","companyname","casesType","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4a799a55.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./Infobox.css\";\r\n\r\nfunction InfoBox({ date, todayStock, prevStock, market}) {\r\n  let c = market === \"NSE\"?\"NEFTY50\":\"SENSEX\";\r\n  return (\r\n    <Card\r\n      // onClick={props.onClick}\r\n      className={`infoBox ${ \"infoBox--selected\"} `}\r\n    >\r\n      <CardContent>\r\n        <Typography className=\"infoBox__market\" color=\"textSecondary\" gutterBottom>\r\n          {market}\r\n        </Typography>\r\n        <Typography className=\"infoBox__type\" color=\"textSecondary\">\r\n          {c} \r\n        </Typography>\r\n\r\n        <div className=\"infoBox__price\">\r\n          <h2 className={`infoBox__stock `}>\r\n            {todayStock}\r\n          </h2>\r\n          <p className=\"prev__close\">\r\n            <p>Prev Close</p>\r\n            <p className=\"prev_price\">{prevStock}</p>\r\n            </p>\r\n        </div>\r\n\r\n        \r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;","import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./StockInfo.css\";\r\n\r\nfunction StockInfo({date,open, type, todayStock, prevStock, low, high}) {\r\n  let c = type === \"NSE\"?\"NEFTY50\":\"SENSEX\";\r\n  let diff, per;\r\n  if(todayStock > prevStock)\r\n  {\r\n        diff = todayStock - prevStock\r\n        per = (diff/prevStock)*100\r\n  }\r\n  else\r\n  {\r\n        diff =  prevStock - todayStock\r\n        per = (diff/todayStock)*100\r\n  }\r\n  return (\r\n    <Card\r\n      // onClick={props.onClick}\r\n      className={`stockInfo ${ \"stockInfo--selected\"} `}\r\n    >\r\n      <CardContent>\r\n        <Typography className=\"stockInfo\" color=\"textSecondary\" gutterBottom>\r\n          <h1 className=\"stockInfo__c\">{c} </h1>\r\n        </Typography>\r\n        <Typography className=\"stockInfo__type\" color=\"textSecondary\">\r\n          <hr/>\r\n          \r\n        </Typography>\r\n\r\n        <div className=\"stockInfo__price\">\r\n            <div className=\"left\">\r\n                <h2 className=\"stockInfo__stock \">\r\n                    {todayStock}\r\n                </h2>\r\n                <h3 className=\"diffPer\">{parseFloat(diff).toFixed(2)}({parseFloat(per).toFixed(2)}%)</h3>\r\n                <h4 className=\"text-secondary\">As on {date}</h4>\r\n\r\n            </div>\r\n            <div className=\"right\">\r\n                <p className=\"prev__close\">\r\n                    <p>Day Range</p>\r\n                    <div className=\"range\">\r\n                        <h5>{low}</h5>\r\n                        <h5>{high}</h5>\r\n                    </div>\r\n                    \r\n                </p>\r\n            </div>\r\n        </div>\r\n        <hr className=\"dotted\"/>\r\n        <div className=\"overview\">\r\n            <hr/>\r\n            <h3>OVERVIEW</h3>\r\n            <hr/>\r\n            <div className=\"overview__info\">\r\n                <div className=\"row\">\r\n                    <p>Open</p>\r\n                    <h4>{open}</h4>\r\n                    <p>Day Low</p>\r\n                    <h4>{low}</h4>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <p>Previous Close</p>\r\n                    <h4>{prevStock}</h4>\r\n                    <p>Day High</p>\r\n                    <h4>{high}</h4>\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n\r\n        \r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default StockInfo;","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return tooltipItem.value;\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return value;\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\n\r\n\r\nfunction Graph({ company }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(`http://127.0.0.1:8000/api/company-data/${company}`)\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          setData(data);\r\n          console.log(data)\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [company]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Graph;","import React ,{ useState , useEffect} from 'react';\nimport './App.css';\nimport { Redirect, Link, Route,Switch } from 'react-router-dom'\nimport {  MenuItem,  FormControl,  Select} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport StockInfo from \"./StockInfo\";\nimport Graph from \"./Graph\";\n\nfunction App() {\n\n  const [ticker, setTicker] = useState(\"NSE\");\n  const [stock, setStock] = useState({});\n  const [Stockdata, setData] = useState({});\n  \n  \n\n  useEffect(() => {\n    fetch(\"http://127.0.0.1:8000/api/get-data/NSE/\")\n      .then((response) => response.json())\n      .then((data) => {\n        setStock(data.data[0]);\n        setData(data.data[1]);\n\n      });\n  }, []);\n\n  const onStockChange = async   (e) => {\n  const tickerSymbol = e.target.value;\n    const url =\n      tickerSymbol === \"NSE\"\n        ? \"http://127.0.0.1:8000/api/get-data/NSE/\"\n        : \"http://127.0.0.1:8000/api/get-data/BSE/\";\n    // const url = \"http://127.0.0.1:8000/api/get-data/NSE/\"\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setTicker(tickerSymbol);\n        setStock(data.data[0]);\n        setData(data.data[1]);\n\n      });\n  };\n\n  const [closePrice, setClosePrice] =useState();\n  const [companyName, setCompanyName] =useState(\"Reliance\");\n\n  const onCompanyChange = (e) => {\n    const companyname = e.target.value;\n      setCompanyName(companyname);\n    };\n\n\n  return (\n    <div className=\"app\">\n        <div className=\"app__header\">\n          \n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onStockChange}\n              value = {ticker}\n            >\n              <MenuItem value=\"NSE\">NSE</MenuItem>\n              <MenuItem value=\"BSE\">BSE</MenuItem>\n             \n            </Select>\n          </FormControl>\n          <h1>Flipr Hackathon 5</h1>\n        </div>\n        <div className=\"app__stats\">\n          \n          <InfoBox\n            market= {ticker}\n            date = {parseFloat(Stockdata[0]).toFixed(2)  }\n            todayStock={parseFloat(Stockdata[4]).toFixed(2)}\n            prevStock={parseFloat(stock[4]).toFixed(2)}\n            \n          />\n        </div>\n        <StockInfo\n          date = {Stockdata[0]}\n          type= {ticker} \n          open={parseFloat(Stockdata[1]).toFixed(2)} \n          todayStock={parseFloat(Stockdata[4]).toFixed(2)} \n          prevStock = {parseFloat(stock[4]).toFixed(2)}\n          low = {parseFloat(Stockdata[2]).toFixed(2)}\n          high = {parseFloat(Stockdata[3]).toFixed(2)}\n        />\n        <div className=\"app__graph\">\n        <FormControl className=\"appgraph__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCompanyChange}\n              value = {companyName}\n            >\n              <MenuItem value=\"Reliance\">Reliance</MenuItem>\n              <MenuItem value=\"AshokLeyland\">Ashok Leyland</MenuItem>\n              <MenuItem value=\"Cipla\">Cipla</MenuItem>\n              <MenuItem value=\"TataSteel\">Tata Steel</MenuItem>\n              <MenuItem value=\"EicherMotors\">Eicher Motors</MenuItem>\n             \n            </Select>\n          </FormControl>\n\n          <Graph casesType={companyName} />\n          \n        </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}